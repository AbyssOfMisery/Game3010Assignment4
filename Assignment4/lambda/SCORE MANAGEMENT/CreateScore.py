import jsonimport boto3import decimalimport datetime dynamodb = boto3.resource('dynamodb')def lambda_handler(event, context):    table = dynamodb.Table('MatchResult')    if event['httpMethod'] == 'POST':        if 'body' in event:            raw_text = event['body']            body = json.loads(raw_text)            if 'GameName' in body and 'Username' in body and 'Score' in body:                timeEnd = datetime.datetime.now().strftime("%Y,%m,%d,%H,%M,%S")                response = table.get_item(Key={'Username':body['Username']})                if not checkUserName(body['Username']):                    return error('This user '+body['Username'] + 'does not exsit')                if not checkGameName(body['GameName']):                    return error('This game' + body['GameName'] + 'does not exsit')                if 'Item' in response:                    table.update_item(                        Key = {                            'Username' : body['Username']                         },                        UpdateExpression = 'SET Score = result, ResultTime = rst ',                        ExpressionAttributeValues={                            'result': body['Score'],                            'rst':timeEnd                        }                    )                    return scoreSet(body['Username'],body['GameName'])                else :                    #Creates a new entry                    newResult = {                        'Username' : body['Username'] ,                        'Score': body['Score'],                        'GameName':body['GameName'],                        'ResultTime':timeEnd                    }                    table.put_item(                        Item = newResult                    )                    return scoreSet(body['Username'],body['GameName'])            else:                return error('This body raw text does not have GameName or Username')        else :                   return error('This massage does not have body raw text')    else:        return error('Change postman to Post mode')def error(msg):    return {        'statusCode': 200,        'body':  msg     }def checkUserName(user_id):    table = dynamodb.Table('Players')    this_user = table.get_item(Key={'user_id':user_id})    return 'Item' in this_userdef checkGameName(game_name):    table = dynamodb.Table('RemoteSettings')    this_game = table.get_item(Key={'GameName':game_name})    return 'Item' in this_gamedef scoreSet(user_id,game_name):    return {         'statusCode': 200,         'body': 'Score has created for user ' + user_id + ' in this game ' + game_name     }